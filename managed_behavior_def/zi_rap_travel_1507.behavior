managed implementation in class zbp_i_rap_travel_1507 unique;
strict;

define behavior for zi_rap_travel_1507 alias Travel
persistent table zrap_atrav_1507
lock master
authorization master ( instance )
etag master LastChangedAt
{
  create;
  update;
  delete;
//Runtime to automatically generate and assign a key when new instances
  field ( numbering : managed, readonly ) TravelUUID;

//Mandatory fields -still need some validation
  field ( mandatory ) AgencyID, CustomerID;
// Readonly fields
  field (readonly) CreatedAt,createdBy,LastChangedBy,LastChangedAt;
  association _Bookings { create; }

//Need to validate Agency ID on create-Post request
  validation validate_agency on save { field AgencyID; create; }

 validation validate_customer on save { field CustomerID; create;}
  // We need to make sure we tell how to map to the DB
  mapping for ZRAP_ATRAV_1507
  {
    TravelUUID = travel_uuid;
    TravelID = travel_id;
    AgencyID = agency_id;
    CustomerID = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    CurrencyCode = currency_code;
    Description = description;
    OverallStatus = overall_status;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
  }



}

define behavior for zi_rap_booking_1507 alias Bookings
persistent table zrap_abook_1507
lock dependent by _Travel
authorization dependent by _Travel
etag master LastChangedAt
{
  update;
  delete;
  //Runtime to automatically generate and assign a key when new instances
  field ( numbering : managed, readonly ) BookingUUID;
  field ( readonly ) TravelUUID;
  association _Travel;

  mapping for zrap_abook_1507
  {
    BookingUUID = booking_uuid;
    TravelUUID = travel_uuid;
    BookingID = booking_id;
    BookingDate = booking_date;
    CustomerID = customer_id;
    CarrierID = carrier_id;
    ConnectionID = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    CreatedBy = created_by;
    LastChangedBy = last_changed_by;
  }



}